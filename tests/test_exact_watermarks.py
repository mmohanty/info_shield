from info_shield.patterns.registry import PatternRegistry
from info_shield.scanner import GuardrailScanner

def test_exact_watermarks_detect_and_redact():
    reg = PatternRegistry.load_builtin()
    pats = [p for p in reg.list_all() if p.name.startswith(("watermark_ci_", "watermark_cs_"))]
    assert pats, "No watermark patterns loaded"
    scanner = GuardrailScanner(pats)
    text = "This content was generated by an AI. CONFIDENTIAL - INTERNAL."
    matches = scanner.scan_text(text)
    kinds = {m.pattern for m in matches}
    assert any(k.startswith("watermark_ci_") for k in kinds) or any(k.startswith("watermark_cs_") for k in kinds)

    # redaction sanity
    from info_shield.redactor import Redactor
    redacted = Redactor(pats).apply(text, matches)
    assert "[REDACTED]" in redacted or "[WATERMARK]" in redacted
